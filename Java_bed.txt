Broad steps
1) install depclean and tool B
2) identify files commonly applicable to bloatlibd and tools in 1)
3) run tools in 1) on set of files by 2) to get accuracy, rt and space req

22-07-2021
Beginning with analyzing tools.
Comparisons are with DepClean and tool B ( will name it soon)
installed DepClean --- instructions at https://github.com/castor-software/depclean
#need to fix environment variable minor issue
Obtained tool b Named JIngredients--- https://github.com/takashi-ishio/JIngredients
Target -- 1)install tools --half done
		  2)get tools running
23-07-2021
found depclean-web (web version) (installing on local) instructions at https://github.com/castor-software/depclean-web 
installing jingredients

24-07-2021
depclean cli chosen, takes as input maven project , downloads the requisite jars and then does analysis. output is list of dependencies used and unused (direct, transitive and inherited all are reported) direct-- defined in pom.xml
							transitive -- deps of direct deps
							inherited -- from parent
installation	git clone the repo (mentioned above)
				have jdk installed (version >=11)
				install maven (either from website or use apt-get)
				cd to cloned repo
				run mvn clean install

commands to do so --> cd to project
					  mvn compile
					  mvn compiler:testCompile
					  mvn se.kth.castor:depclean-maven-plugin:2.0.2-SNAPSHOT:depclean 
to do - capture result method 
		find common lib set

for capture result, plan to use regex (grep or python must choose?)

https://stackoverflow.com/questions/4757426/maven-specify-the-outputdirectory-only-for-packaging-a-jar

https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html


30-07-2021

Data source: https://github.com/apache/maven-plugins https://repo.maven.apache.org/maven2/org/apache/maven/plugins/

Jingredients 

1) First compile all .java files in the Repo as follows (for windows use cmd to run command and ; in place of : as separator) E.g:
    javac -cp lib/:src/ src/sarf/jingredients/hash/*.java
    javac -cp lib/:src/ src/sarf/jingredients/model/*.java
    javac -cp lib/:src/ src/sarf/jingredients/util/*.java
    javac -cp lib/:src/ src/sarf/jingredients/*.java

2) Then do as the github repo for Jingredients instructs
    run each java command by also attaching the -cp flag as above
    E.g.
    java -cp lib/:src/ sarf.jingredients.CreateValidJarList

Converting maven projects to jars
1) must update updating compiler used for compilation to JavaSE1.7 (otherwise mvn package won't work)

    sed -ir 's@</properties>@<maven.compiler.source>1.7</maven.compiler.source><maven.compiler.target>1.7</maven.compiler.target></properties>@g' $(grep -rEl  '</properties>' ./)  
2)
for making maven jars (skipping license checks which may throw error) ----  mvn package -Dlicense.skip=true -Drat.skip=true

3) optionally, add to pom.xml to specify output jar directory (mvn package -dDir "destination")
    <profile>
        <id>conf</id>
        <build>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.3.1</version>
                    <configuration>
                        <outputDirectory>${dir}</outputDirectory>
                    </configuration>
                </plugin>
            </plugins>
        </build>
    </profile>
