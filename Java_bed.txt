Broad steps
1) install depclean and tool B
2) identify files commonly applicable to bloatlibd and tools in 1)
3) run tools in 1) on set of files by 2) to get accuracy, rt and space req

22-07-2021
Beginning with analyzing tools.
Comparisons are with DepClean and tool B ( will name it soon)
installed DepClean --- instructions at https://github.com/castor-software/depclean
#need to fix environment variable minor issue
Obtained tool b Named JIngredients--- https://github.com/takashi-ishio/JIngredients
Target -- 1)install tools --half done
		  2)get tools running
23-07-2021
found depclean-web (web version) (installing on local) instructions at https://github.com/castor-software/depclean-web 
installing jingredients

24-07-2021
depclean cli chosen, takes as input maven project , downloads the requisite jars and then does analysis. output is list of dependencies used and unused (direct, transitive and inherited all are reported) direct-- defined in pom.xml
							transitive -- deps of direct deps
							inherited -- from parent
installation	git clone the repo (mentioned above)
				have jdk installed (version >=11)
				install maven (either from website or use apt-get)
				cd to cloned repo
				run mvn clean install

commands to do so --> cd to project
					  mvn compile
					  mvn compiler:testCompile
					  mvn se.kth.castor:depclean-maven-plugin:2.0.2-SNAPSHOT:depclean 
to do - capture result method 
		find common lib set
for capture result, plan to use regex (grep or python must choose?)
https://stackoverflow.com/questions/4757426/maven-specify-the-outputdirectory-only-for-packaging-a-jar
https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
add to pom.xml to specify output jar directory (mvn package -dDir "destination")
    <profile>
        <id>conf</id>
        <build>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.3.1</version>
                    <configuration>
                        <outputDirectory>${dir}</outputDirectory>
                    </configuration>
                </plugin>
            </plugins>
        </build>
    </profile>
28-07-2021
running jingredients in linux
must adjust for classpath. 
1) Clone code from git repo given above (line 11).
2) Now extract from the lib folder, all jar files.
3) copy all folders except META-INF and doc to the main directory of the Jingredients project
4) compile using javac the .java files in src/sarf/jingredients/util folder. similarly do so for the src/sarf/jingredients/hash/ and src/sarf/jingredients/model/ folders.
compilation format (assuming relevant directories are asm/,org/,gnu/ and soba/):- javac -cp asm/:org/:gnu/:soba/:"otherlocations":. file.java  
5) Now copy the sarf folder to main directory
6) run commands as given in readme of the project
tool works completely
Next steps construct common db for all
           create script to measure RTs and accuracy